//===================================================================
//
// ゲーム画面の処理　[game.cpp]
// Author: fukuyama syuya
//
//===================================================================
#include "game.h"
#include "main.h"
#include "player.h"
#include "bg.h"
#include "bullet.h"
#include "enemy.h"
#include "score.h"
#include "explosion.h"
#include "sound.h"
#include "input.h"
#include "fade.h"
#include "pause.h"
#include "effect.h"
#include "result.h"

//===========================================================================================================
//マクロ定義
//===========================================================================================================
#define MAX_LINE (2)																					//敵の横数
#define MAX_POS_Y  (SCREEN_WIDTH / 3)																	//敵のY座標の位置
#define MAX_POS_X  (280.0f)																				//敵のX座標の位置

#define SCREEN_WIDTH (1280)																				//画面の幅
#define SCREEN_HEIGHT (1080)																			//画面の高さ


//===========================================================================================================
//グローバル変数
//===========================================================================================================
bool g_bPause = false;																					//ポーズ中かどうか
GAMEJUB g_pResult = GAMECLAER_RESULT;																	//ゲームリザルト

//===========================================================================================================
//ゲームの初期化処理
//===========================================================================================================
HRESULT InitGame(void)
{
	//背景の初期化
	InitBg();

	//ポリゴンの初期化処理
	InitPlayer();

	//弾の初期化処理
	InitBullet();

	//敵の初期化処理
	InitEnemy();

	//スコアの初期化処理
	InitScore();

	//爆発の初期化処理
	InitExplosion();

	//エフェクトの初期化処理
	InitEffect();

	//ポーズの初期化処理
	InitPause();

	//敵の表示
	for (int nCntEnemy = 0; nCntEnemy < MAX_LINE; nCntEnemy++)
	{
		//敵の位置と体力
		SetEnemy(D3DXVECTOR3(MAX_POS_Y *(nCntEnemy + 1), MAX_POS_X, 0.0f),1500, 0,20);
	}

	//音源
	PlaySound(SOUND_LABEL_BGM008);

	return S_OK;
}

//===========================================================================================================
//ゲームの終了処理
//===========================================================================================================
void UninitGame(void)
{
	//サウンドを一時停止
	StopSound();

	//ポリゴンの終了処理
	UninitPlayer();

	//背景の終了処理
	UninitBg();

	//弾の終了処理
	UninitBullet();

	//敵の終了処理
	UninitEnemy();

	//スコアの終了処理
	UninitScore();

	//爆発の終了処理
	UninitExplosion();

	//エフェクトの終了処理
	UninitEffect();

	//ポーズの終了処理
	UninitPause();
}

//===========================================================================================================
//ゲームの更新処理
//===========================================================================================================
void UpdateGame(void)
{
	//変数宣言
	PLAYER *pPlayer;

	pPlayer = GetPlayer();


	//ポーズメニューの更新処理
	if (GetKeyboardTrigger(DIK_P) == true)
	{
		g_bPause = g_bPause ? false : true;
	}

	if (g_bPause == true)
	{//ポーズの更新処理
		UpdatePause();
	}
	else
	{
		//背景の更新
		UpdateBg();

		//ポリゴンの更新処理
		UpdatePlayer();

		//弾の更新処理
		UpdateBullet();

		//敵の更新処理
		UpdateEnemy();

		//スコアの更新処理
		UpdateScore();

		//爆発の更新処理
		UpdateExplosion();

		//エフェクトの更新処理
		UpdateEffect();

	}
	
	//クリアリザルト画面へ飛ぶ処理
	int nCntEnemy = GetCntEnemy();

	if (nCntEnemy == 0)
	{
		g_pResult = GAMECLAER_RESULT;
		SetFade(FADE_OUT, MODE_RESULT);
	}

	//ゲームオーバーリザルト画面の飛ぶ処理
	if (pPlayer->nZan == 0)
	{
		g_pResult = GAMEOVER_RESULT;
		SetFade(FADE_OUT, MODE_RESULT);
	}
}

//===========================================================================================================
//ゲームの描画処理
//===========================================================================================================
void DrawGame(void)
{
	//背景の描画処理
	DrawBg();

	//ポリゴンの描画処理
	DrawPlayer();

	//敵の描画処理
	DrawEnemy();

	//弾の描画処理
	DrawBullet();

	//スコアの描画処理
	DrawScore();

	//爆発の描画処理
	DrawExplosion();

	//エフェクトの描画処理
	DrawEffect();

	if (g_bPause == true)
	{
		//ポーズの描画処理
		DrawPause();
	}
}

//===========================================================================================================
//	リザルト
//===========================================================================================================
GAMEJUB GetGameResult(void)
{
	return g_pResult;
}

//===========================================================================================================
//	ポーズ処理
//===========================================================================================================
void SetPause(bool bPause)
{
	//ポーズ中かどうか
	g_bPause = bPause;
}